<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ronald&#39;s Blog</title>
    <link>https://ronaldbosma.github.io/blog/</link>
    <description>Recent content in Blogs on Ronald&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ronald Bosma - All rights reserved</copyright>
    <lastBuildDate>Mon, 31 May 2021 07:30:00 +0200</lastBuildDate><atom:link href="https://ronaldbosma.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Handling exceptions in SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</link>
      <pubDate>Mon, 31 May 2021 07:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</guid>
      <description>I use Gherkin scenarios to describe the functional specifications of my software and SpecFlow to automate these scenarios as tests. Usually there will be a couple of scenarios describing the happy path of the feature I&amp;rsquo;m building but also some scenarios concerning failures. In this post I&amp;rsquo;ll show my solution how to handle failures in the form of exceptions with the Driver pattern.</description>
    </item>
    
    <item>
      <title>Provision an Azure VM in an Azure Pipelines Environment</title>
      <link>https://ronaldbosma.github.io/blog/2021/03/16/provision-an-azure-vm-in-an-azure-pipelines-environment/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2021/03/16/provision-an-azure-vm-in-an-azure-pipelines-environment/</guid>
      <description>In the past I&amp;rsquo;ve created a custom Azure Pipelines task to install .NET Core on a Windows server. To test this task, I had to manually setup an environment with virtual machines. I wanted to automate this process, so I created a YAML pipeline in Azure DevOps that automatically provisions an Azure virtual machine and registers the virtual machine in an Azure Pipelines environment.</description>
    </item>
    
    <item>
      <title>Handling technical ids in Gherkin with SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</guid>
      <description>Gherkin scenarios in Specification by Example are used to describe the functional requirements of your software. They should be readable for the team and also for the business that uses the software. Technical ids don&amp;rsquo;t have a place here. They&amp;rsquo;re usually included in scenarios for test automation purposes but make the them harder to read. So, what to do when your code requires a technical id?</description>
    </item>
    
    <item>
      <title>How to install .NET Core on a Windows server</title>
      <link>https://ronaldbosma.github.io/blog/2020/05/07/how-to-install-.net-core-on-a-windows-server/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2020/05/07/how-to-install-.net-core-on-a-windows-server/</guid>
      <description>In this post I show how I install and update the .NET Core Runtime &amp;amp; Hosting Bundle on Windows servers using Azure Pipelines. Making patching .NET Core a trivial matter.</description>
    </item>
    
    <item>
      <title>Using multi-stage YAML pipeline to create and publish NuGet packages</title>
      <link>https://ronaldbosma.github.io/blog/2019/09/03/using-multi-stage-yaml-pipeline-to-create-and-publish-nuget-packages/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/09/03/using-multi-stage-yaml-pipeline-to-create-and-publish-nuget-packages/</guid>
      <description>I&amp;rsquo;ve recently created a new NuGet package called FluentAssertions.ArgumentMatchers.Moq that I published on nuget.org. In order to make the process of creating and publishing this package as smooth and simple as possible, I&amp;rsquo;ve created a multi-stage YAML pipeline in Azure DevOps.</description>
    </item>
    
    <item>
      <title>Build And Release Hugo Site Using Azure Pipelines</title>
      <link>https://ronaldbosma.github.io/blog/2019/03/24/build-and-release-hugo-site-using-azure-pipelines/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/03/24/build-and-release-hugo-site-using-azure-pipelines/</guid>
      <description>In this post I&amp;rsquo;ll give a step-by-step explanation on how I build and publish my Hugo blog site to GitHub Pages using Azure Pipelines.</description>
    </item>
    
    <item>
      <title>Cleaning Up Your Test Data Creation</title>
      <link>https://ronaldbosma.github.io/blog/2019/03/20/cleaning-up-your-test-data-creation/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/03/20/cleaning-up-your-test-data-creation/</guid>
      <description>I still come across a lot of automated tests with many lines of code just to create an object. Even when most data is not relevant for the scenario being tested.</description>
    </item>
    
  </channel>
</rss>
