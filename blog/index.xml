<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Ronald&#39;s Blog</title>
    <link>https://ronaldbosma.github.io/blog/</link>
    <description>Recent content in Blogs on Ronald&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ronald Bosma - All rights reserved</copyright>
    <lastBuildDate>Mon, 02 Sep 2024 19:30:00 +0200</lastBuildDate><atom:link href="https://ronaldbosma.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Validate API Management policies with PSRule</title>
      <link>https://ronaldbosma.github.io/blog/2024/09/02/validate-api-management-policies-with-psrule/</link>
      <pubDate>Mon, 02 Sep 2024 19:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/09/02/validate-api-management-policies-with-psrule/</guid>
      <description>I&amp;rsquo;ve been working with Azure API Management for a while now, and one of the challenges I&amp;rsquo;ve faced is finding a reliable way to validate the XML policies I write. While tools like SonarQube are excellent for code quality checks, they don&amp;rsquo;t support the specific checks required for Azure API Management policies. In this blog post, I&amp;rsquo;ll demonstrate how to use PSRule to validate your Azure API Management policies effectively.</description>
    </item>
    
    <item>
      <title>Reqnroll Parsable Value Retriever and Comparer</title>
      <link>https://ronaldbosma.github.io/blog/2024/07/17/reqnroll-parsable-value-retriever-and-comparer/</link>
      <pubDate>Wed, 17 Jul 2024 08:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/07/17/reqnroll-parsable-value-retriever-and-comparer/</guid>
      <description>In this blog post, we&amp;rsquo;ll explore how to use the &lt;code&gt;IParsable&amp;lt;T&amp;gt;&lt;/code&gt; interface to build a generic Reqnroll value retriever and comparer. We&amp;rsquo;ll start by creating custom value retrievers and comparers, then develop a reusable solution with generics, and finally, we&amp;rsquo;ll use reflection to make it even more generic. (This solution also works for its predecessor, SpecFlow, when using .NET 7 or higher.)</description>
    </item>
    
    <item>
      <title>Replace placeholders in string with user-defined Bicep function</title>
      <link>https://ronaldbosma.github.io/blog/2024/06/21/replace-placeholders-in-string-with-user-defined-bicep-function/</link>
      <pubDate>Fri, 21 Jun 2024 15:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/06/21/replace-placeholders-in-string-with-user-defined-bicep-function/</guid>
      <description>When you have a string value in Bicep with multiple placeholders that you want to replace, it can be tricky to find a good way to do this. In this blog post, I will show you how you can replace placeholders in a string with a couple of user-defined functions.</description>
    </item>
    
    <item>
      <title>Apply Azure naming convention using Bicep functions</title>
      <link>https://ronaldbosma.github.io/blog/2024/06/05/apply-azure-naming-convention-using-bicep-functions/</link>
      <pubDate>Wed, 05 Jun 2024 08:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/06/05/apply-azure-naming-convention-using-bicep-functions/</guid>
      <description>When deploying Azure resources, it&amp;rsquo;s a good practice to apply a naming convention to your resources. This will help you to identify the purpose of the resource and the environment it belongs to. In this blog post, I will show you how to apply a naming convention using Bicep user-defined functions. This post also includes a short introduction to the (experimental) Bicep Testing Framework.</description>
    </item>
    
    <item>
      <title>Securing backend connections with mTLS in API Management</title>
      <link>https://ronaldbosma.github.io/blog/2024/05/24/securing-backend-connections-with-mtls-in-api-management/</link>
      <pubDate>Fri, 24 May 2024 10:15:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/05/24/securing-backend-connections-with-mtls-in-api-management/</guid>
      <description>In this third post on working with client certificates in Azure API Management, we’ll focus on securing backend connections with mTLS. We’ll deploy two API Management instances. The first will serve as the backend and require a client certificate for authentication. The second will act as the client. We will call the client using TLS, and it will, in turn, connect to the backend using mTLS.</description>
    </item>
    
    <item>
      <title>Validate client certificates in API Management when it&#39;s behind an Application Gateway</title>
      <link>https://ronaldbosma.github.io/blog/2024/02/19/validate-client-certificates-in-api-management-when-its-behind-an-application-gateway/</link>
      <pubDate>Mon, 19 Feb 2024 19:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/02/19/validate-client-certificates-in-api-management-when-its-behind-an-application-gateway/</guid>
      <description>In this second post, we expand on the solution from the previous post. We&amp;rsquo;ll deploy API Management inside a virtual network, positioning it behind an application gateway. We&amp;rsquo;ll configure the application gateway with an mTLS listener to validate client certificates and forward them to API Management for further processing. This approach can also be used with other types of backends, such as an ASP.NET Web API.</description>
    </item>
    
    <item>
      <title>Validate client certificates in API Management</title>
      <link>https://ronaldbosma.github.io/blog/2024/02/02/validate-client-certificates-in-api-management/</link>
      <pubDate>Fri, 02 Feb 2024 11:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/02/02/validate-client-certificates-in-api-management/</guid>
      <description>This blog post is the start of a series on how to work with client certificates in Azure API Management to setup a mutual TLS (mTLS) connection. While Azure&amp;rsquo;s official documentation provides excellent guidance on setting up client certificates via the Azure Portal, we&amp;rsquo;ll dive into utilizing Bicep and the Azure CLI, to automate the process. In this first post, we&amp;rsquo;ll cover the basics of how to validate client certificates in API Management.</description>
    </item>
    
    <item>
      <title>Where to position SpecFlow in the Test Pyramid?</title>
      <link>https://ronaldbosma.github.io/blog/2023/05/11/where-to-position-specflow-in-the-test-pyramid/</link>
      <pubDate>Thu, 11 May 2023 20:45:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2023/05/11/where-to-position-specflow-in-the-test-pyramid/</guid>
      <description>Automated testing is an essential part of software development, and determining the appropriate scope for your tests is crucial. This is also true when automating Gherkin scenarios with SpecFlow (or Cucumber). In this post I explore the different levels of the test pyramid and describe my preferred level for SpecFlow tests.</description>
    </item>
    
    <item>
      <title>Deploy Azure Workbook and App Insights Function</title>
      <link>https://ronaldbosma.github.io/blog/2023/03/10/deploy-azure-workbook-and-app-insights-function/</link>
      <pubDate>Fri, 10 Mar 2023 15:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2023/03/10/deploy-azure-workbook-and-app-insights-function/</guid>
      <description>In this post I explain how to deploy an Azure workbook using Bicep and set environment specific variables. I&amp;rsquo;ll also show how to deploy a shared kusto function in Application Insights with the Azure CLI.</description>
    </item>
    
    <item>
      <title>Azure Workbook Tips &amp; Tricks</title>
      <link>https://ronaldbosma.github.io/blog/2023/02/28/azure-workbook-tips-tricks/</link>
      <pubDate>Tue, 28 Feb 2023 19:30:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2023/02/28/azure-workbook-tips-tricks/</guid>
      <description>If you use Azure, you most likely use Application Insights for logging. You can use a dashboard to visualize your logging and gain better insights, but dashboards come with some limitations. For more flexibility Azure has worbooks. In this blog post I&amp;rsquo;ll share some tips &amp;amp; tricks that I&amp;rsquo;ve gathered over the years. As a sample, we&amp;rsquo;ll create a workbook that shows information about requests sent to an API Management instance.</description>
    </item>
    
    <item>
      <title>Transform SpecFlow Table Column</title>
      <link>https://ronaldbosma.github.io/blog/2022/10/29/transform-specflow-table-column/</link>
      <pubDate>Sat, 29 Oct 2022 12:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2022/10/29/transform-specflow-table-column/</guid>
      <description>In a previous blog post I wrote about a trick on how to remove technical ids from Gherkin scenarios while still using technical ids in the step definitions. The proposed solution worked well for the given scenario, but not for other cases. In this post I look at several approaches on how to solve this issue.</description>
    </item>
    
    <item>
      <title>Handling exceptions in SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</link>
      <pubDate>Mon, 31 May 2021 07:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</guid>
      <description>I use Gherkin scenarios to describe the functional specifications of my software and SpecFlow to automate these scenarios as tests. Usually there will be a couple of scenarios describing the happy path of the feature I&amp;rsquo;m building but also some scenarios concerning failures. In this post I&amp;rsquo;ll show my solution how to handle failures in the form of exceptions with the Driver pattern.</description>
    </item>
    
    <item>
      <title>Provision an Azure VM in an Azure Pipelines Environment</title>
      <link>https://ronaldbosma.github.io/blog/2021/03/16/provision-an-azure-vm-in-an-azure-pipelines-environment/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2021/03/16/provision-an-azure-vm-in-an-azure-pipelines-environment/</guid>
      <description>In the past I&amp;rsquo;ve created a custom Azure Pipelines task to install .NET Core on a Windows server. To test this task, I had to manually setup an environment with virtual machines. I wanted to automate this process, so I created a YAML pipeline in Azure DevOps that automatically provisions an Azure virtual machine and registers the virtual machine in an Azure Pipelines environment.</description>
    </item>
    
    <item>
      <title>Handling technical ids in Gherkin with SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</guid>
      <description>Gherkin scenarios in Specification by Example are used to describe the functional requirements of your software. They should be readable for the team and also for the business that uses the software. Technical ids don&amp;rsquo;t have a place here. They&amp;rsquo;re usually included in scenarios for test automation purposes but make the them harder to read. So, what to do when your code requires a technical id?</description>
    </item>
    
    <item>
      <title>How to install .NET Core on a Windows server</title>
      <link>https://ronaldbosma.github.io/blog/2020/05/07/how-to-install-.net-core-on-a-windows-server/</link>
      <pubDate>Thu, 07 May 2020 00:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2020/05/07/how-to-install-.net-core-on-a-windows-server/</guid>
      <description>In this post I show how I install and update the .NET Core Runtime &amp;amp; Hosting Bundle on Windows servers using Azure Pipelines. Making patching .NET Core a trivial matter.</description>
    </item>
    
    <item>
      <title>Using multi-stage YAML pipeline to create and publish NuGet packages</title>
      <link>https://ronaldbosma.github.io/blog/2019/09/03/using-multi-stage-yaml-pipeline-to-create-and-publish-nuget-packages/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/09/03/using-multi-stage-yaml-pipeline-to-create-and-publish-nuget-packages/</guid>
      <description>I&amp;rsquo;ve recently created a new NuGet package called FluentAssertions.ArgumentMatchers.Moq that I published on nuget.org. In order to make the process of creating and publishing this package as smooth and simple as possible, I&amp;rsquo;ve created a multi-stage YAML pipeline in Azure DevOps.</description>
    </item>
    
    <item>
      <title>Build And Release Hugo Site Using Azure Pipelines</title>
      <link>https://ronaldbosma.github.io/blog/2019/03/24/build-and-release-hugo-site-using-azure-pipelines/</link>
      <pubDate>Sun, 24 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/03/24/build-and-release-hugo-site-using-azure-pipelines/</guid>
      <description>In this post I&amp;rsquo;ll give a step-by-step explanation on how I build and publish my Hugo blog site to GitHub Pages using Azure Pipelines.</description>
    </item>
    
    <item>
      <title>Cleaning Up Your Test Data Creation</title>
      <link>https://ronaldbosma.github.io/blog/2019/03/20/cleaning-up-your-test-data-creation/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2019/03/20/cleaning-up-your-test-data-creation/</guid>
      <description>I still come across a lot of automated tests with many lines of code just to create an object. Even when most data is not relevant for the scenario being tested.</description>
    </item>
    
  </channel>
</rss>
