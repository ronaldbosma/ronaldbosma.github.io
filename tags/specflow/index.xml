<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpecFlow on Ronald&#39;s Blog</title>
    <link>https://ronaldbosma.github.io/tags/specflow/</link>
    <description>Recent content in SpecFlow on Ronald&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Ronald Bosma - All rights reserved</copyright>
    <lastBuildDate>Wed, 17 Jul 2024 08:00:00 +0200</lastBuildDate><atom:link href="https://ronaldbosma.github.io/tags/specflow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reqnroll Parsable Value Retriever and Comparer</title>
      <link>https://ronaldbosma.github.io/blog/2024/07/17/reqnroll-parsable-value-retriever-and-comparer/</link>
      <pubDate>Wed, 17 Jul 2024 08:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2024/07/17/reqnroll-parsable-value-retriever-and-comparer/</guid>
      <description>In this blog post, we&amp;rsquo;ll explore how to use the &lt;code&gt;IParsable&amp;lt;T&amp;gt;&lt;/code&gt; interface to build a generic Reqnroll value retriever and comparer. We&amp;rsquo;ll start by creating custom value retrievers and comparers, then develop a reusable solution with generics, and finally, we&amp;rsquo;ll use reflection to make it even more generic. (This solution also works for its predecessor, SpecFlow, when using .NET 7 or higher.)</description>
    </item>
    
    <item>
      <title>Where to position SpecFlow in the Test Pyramid?</title>
      <link>https://ronaldbosma.github.io/blog/2023/05/11/where-to-position-specflow-in-the-test-pyramid/</link>
      <pubDate>Thu, 11 May 2023 20:45:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2023/05/11/where-to-position-specflow-in-the-test-pyramid/</guid>
      <description>Automated testing is an essential part of software development, and determining the appropriate scope for your tests is crucial. This is also true when automating Gherkin scenarios with SpecFlow (or Cucumber). In this post I explore the different levels of the test pyramid and describe my preferred level for SpecFlow tests.</description>
    </item>
    
    <item>
      <title>Transform SpecFlow Table Column</title>
      <link>https://ronaldbosma.github.io/blog/2022/10/29/transform-specflow-table-column/</link>
      <pubDate>Sat, 29 Oct 2022 12:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2022/10/29/transform-specflow-table-column/</guid>
      <description>In a previous blog post I wrote about a trick on how to remove technical ids from Gherkin scenarios while still using technical ids in the step definitions. The proposed solution worked well for the given scenario, but not for other cases. In this post I look at several approaches on how to solve this issue.</description>
    </item>
    
    <item>
      <title>Handling exceptions in SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</link>
      <pubDate>Mon, 31 May 2021 07:30:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2021/05/31/handling-exceptions-in-specflow/</guid>
      <description>I use Gherkin scenarios to describe the functional specifications of my software and SpecFlow to automate these scenarios as tests. Usually there will be a couple of scenarios describing the happy path of the feature I&amp;rsquo;m building but also some scenarios concerning failures. In this post I&amp;rsquo;ll show my solution how to handle failures in the form of exceptions with the Driver pattern.</description>
    </item>
    
    <item>
      <title>Handling technical ids in Gherkin with SpecFlow</title>
      <link>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0200</pubDate>
      
      <guid>https://ronaldbosma.github.io/blog/2020/08/08/handling-technical-ids-in-gherkin-with-specflow/</guid>
      <description>Gherkin scenarios in Specification by Example are used to describe the functional requirements of your software. They should be readable for the team and also for the business that uses the software. Technical ids don&amp;rsquo;t have a place here. They&amp;rsquo;re usually included in scenarios for test automation purposes but make the them harder to read. So, what to do when your code requires a technical id?</description>
    </item>
    
  </channel>
</rss>
